--- a/cmake/CMakeLists.txt
+++ b/cmake/CMakeLists.txt
@@ -18,6 +18,19 @@
 ################################################################################
 
 cmake_minimum_required(VERSION 3.21)
+
+option(VERSION_OVERRIDE "Override the version defined in IfcParse.h with the file VERSION in the repository root" OFF)
+
+if (VERSION_OVERRIDE)
+    file(READ "../VERSION" "RELEASE_VERSION_")
+    string(STRIP "${RELEASE_VERSION_}" RELEASE_VERSION)
+    message(STATUS "Detected version '${RELEASE_VERSION}'")
+else()
+    set(RELEASE_VERSION "0.8.0")
+endif()
+
+project(IfcOpenShell VERSION ${RELEASE_VERSION})
+
 set(CMAKE_CXX_STANDARD_REQUIRED ON) # not necessary, but encouraged
 set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
 
@@ -81,17 +94,14 @@ option(WITH_RELATIONSHIP_VALIDATION "Build IfcConvert with option to validate ge
 
 option(USERSPACE_PYTHON_PREFIX "Installs IfcPython for the current user only instead of system-wide." OFF)
 option(ADD_COMMIT_SHA "Add commit sha and branch in version number, warning results in many rebuilds, requires git" OFF)
-option(VERSION_OVERRIDE "Override the version defined in IfcParse.h with the file VERSION in the repository root" OFF)
-
-if (VERSION_OVERRIDE)
-    file(READ "../VERSION" "RELEASE_VERSION_")
-    string(STRIP "${RELEASE_VERSION_}" RELEASE_VERSION)
-    message(STATUS "Detected version '${RELEASE_VERSION}'")
-else()
-    set(RELEASE_VERSION "0.8.0")
-endif()
 
-project(IfcOpenShell VERSION ${RELEASE_VERSION})
+message(STATUS "Build options:")
+get_cmake_property(_variableNames VARIABLES)
+foreach(_variableName ${_variableNames})
+    if(_variableName MATCHES "^(BUILD_|WITH_|ENABLE_|USE_|OPTION_|COLLADA_SUPPORT|GLTF_SUPPORT|HDF5_SUPPORT|IFCXML_SUPPORT|USD_SUPPORT|CITYJSON_SUPPORT|MINIMAL_BUILD|WASM_BUILD|NO_WARN|USERSPACE_PYTHON_PREFIX|ADD_COMMIT_SHA|VERSION_OVERRIDE|MSVC_PARALLEL_BUILD)")
+        message(STATUS "  ${_variableName} = [${${_variableName}}]")
+    endif()
+endforeach()
 
 if(MINIMAL_BUILD)
     message(STATUS "Setting options for minimal build")
@@ -251,6 +261,7 @@ endif()
 
 # Add USD support to serializers 
 if(USD_SUPPORT)
+    find_package(openusd REQUIRED CONFIG)
     UNIFY_ENVVARS_AND_CACHE(USD_INCLUDE_DIR)
     UNIFY_ENVVARS_AND_CACHE(USD_LIBRARY_DIR)
 
@@ -349,152 +360,143 @@ restore_wasm_sysroot()
 message(STATUS "Boost include files found in ${Boost_INCLUDE_DIRS}")
 message(STATUS "Boost libraries found in ${Boost_LIBRARY_DIRS}")
 
-if(NOT MINIMAL_BUILD)
-    # libxml2 is required for IFCXML (optional) and SVGFILL (mandatory)
-    clear_wasm_sysroot()
-    find_package(LibXml2 REQUIRED)
-    restore_wasm_sysroot()
-endif()
-
 if(IFCXML_SUPPORT)
     add_definitions(-DWITH_IFCXML)
     set(SWIG_DEFINES ${SWIG_DEFINES} -DWITH_IFCXML)
 endif()
 
 if(BUILD_IFCGEOM)
-    if(MSVC)
-        add_debug_variants(LIBXML2_LIBRARIES "${LIBXML2_LIBRARIES}" d)
-    endif()
-
+    find_package(Eigen3 REQUIRED CONFIG)
+    
     # Open CASCADE
     if(WITH_OPENCASCADE)
-    if("${OCC_INCLUDE_DIR}" STREQUAL "")
-	clear_wasm_sysroot()
-        find_path(OCC_INCLUDE_DIR Standard_Version.hxx
-            PATHS
-                /usr/include/occt
-                /usr/include/oce
-                /usr/include/opencascade
-            REQUIRED
-        )
-	restore_wasm_sysroot()
-
-        if(OCC_INCLUDE_DIR)
-            message(STATUS "Found Open CASCADE include files in: ${OCC_INCLUDE_DIR}")
+        find_package(OpenCASCADE CONFIG)
+        if(OpenCASCADE_FOUND)
+            message(STATUS "Open CASCADE found in ${OpenCASCADE_DIR}")
         else()
-            message(FATAL_ERROR "Unable to find Open CASCADE include directory, specify OCC_INCLUDE_DIR manually.")
+            if("${OCC_INCLUDE_DIR}" STREQUAL "")
+                clear_wasm_sysroot()
+                find_path(OCC_INCLUDE_DIR Standard_Version.hxx
+                PATHS
+                    /usr/include/occt
+                    /usr/include/oce
+                    /usr/include/opencascade
+                REQUIRED
+                )
+                restore_wasm_sysroot()
+
+                if(OCC_INCLUDE_DIR)
+                    message(STATUS "Found Open CASCADE include files in: ${OCC_INCLUDE_DIR}")
+                else()
+                    message(FATAL_ERROR "Unable to find Open CASCADE include directory, specify OCC_INCLUDE_DIR manually.")
+                endif()
+            else()
+                set(OCC_INCLUDE_DIR ${OCC_INCLUDE_DIR} CACHE FILEPATH "Open CASCADE header files")
+                message(STATUS "Looking for Open CASCADE include files in: ${OCC_INCLUDE_DIR}")
+            endif()
         endif()
-    else()
-        set(OCC_INCLUDE_DIR ${OCC_INCLUDE_DIR} CACHE FILEPATH "Open CASCADE header files")
-        message(STATUS "Looking for Open CASCADE include files in: ${OCC_INCLUDE_DIR}")
-    endif()
 
-    if(OCC_INCLUDE_DIR)
-        file(STRINGS ${OCC_INCLUDE_DIR}/Standard_Version.hxx OCC_MAJOR
-            REGEX "#define OCC_VERSION_MAJOR.*"
-        )
-        string(REGEX MATCH "[0-9]+" OCC_MAJOR ${OCC_MAJOR})
-        file(STRINGS ${OCC_INCLUDE_DIR}/Standard_Version.hxx OCC_MINOR
-          REGEX "#define OCC_VERSION_MINOR.*"
-        )
-        string(REGEX MATCH "[0-9]+" OCC_MINOR ${OCC_MINOR})
-        file(STRINGS ${OCC_INCLUDE_DIR}/Standard_Version.hxx OCC_MAINT
-          REGEX "#define OCC_VERSION_MAINTENANCE.*"
+        if(OCC_INCLUDE_DIR)
+            file(STRINGS ${OCC_INCLUDE_DIR}/Standard_Version.hxx OCC_MAJOR
+                REGEX "#define OCC_VERSION_MAJOR.*"
+            )
+            string(REGEX MATCH "[0-9]+" OCC_MAJOR ${OCC_MAJOR})
+            file(STRINGS ${OCC_INCLUDE_DIR}/Standard_Version.hxx OCC_MINOR
+            REGEX "#define OCC_VERSION_MINOR.*"
+            )
+            string(REGEX MATCH "[0-9]+" OCC_MINOR ${OCC_MINOR})
+            file(STRINGS ${OCC_INCLUDE_DIR}/Standard_Version.hxx OCC_MAINT
+            REGEX "#define OCC_VERSION_MAINTENANCE.*"
+            )
+            string(REGEX MATCH "[0-9]+" OCC_MAINT ${OCC_MAINT})
+            set(OCC_VERSION_STRING "${OCC_MAJOR}.${OCC_MINOR}.${OCC_MAINT}")
+        endif(OCC_INCLUDE_DIR)
+
+        set(OPENCASCADE_LIBRARY_NAMES
+            TKernel TKMath TKBRep TKGeomBase TKGeomAlgo TKG3d TKG2d TKShHealing TKTopAlgo TKMesh TKPrim TKBool TKBO
+            TKFillet TKXSBase TKOffset TKHLR 
+
+            # @todo investigate the exact conditions when this is necessary
+            TKBin
+            # For OCC 7.8.0 and later
+            TKDESTEP TKDEIGES
         )
-        string(REGEX MATCH "[0-9]+" OCC_MAINT ${OCC_MAINT})
-        set(OCC_VERSION_STRING "${OCC_MAJOR}.${OCC_MINOR}.${OCC_MAINT}")
-    endif(OCC_INCLUDE_DIR)
-
-    set(OPENCASCADE_LIBRARY_NAMES
-        TKernel TKMath TKBRep TKGeomBase TKGeomAlgo TKG3d TKG2d TKShHealing TKTopAlgo TKMesh TKPrim TKBool TKBO
-        TKFillet TKXSBase TKOffset TKHLR
-
-        # @todo investigate the exact conditions when this is necessary
-        TKBin
-    )
-
-    if(OCC_VERSION_STRING VERSION_LESS 7.8.0)
-        list(APPEND OPENCASCADE_LIBRARY_NAMES  TKIGES TKSTEPBase TKSTEPAttr TKSTEP209 TKSTEP)
-    else(OCC_VERSION_STRING VERSION_LESS 7.8.0)
-        list(APPEND OPENCASCADE_LIBRARY_NAMES TKDESTEP TKDEIGES)
-    endif(OCC_VERSION_STRING VERSION_LESS 7.8.0)
 
-    if("${OCC_LIBRARY_DIR}" STREQUAL "")
-        find_library(OCC_LIBRARY TKernel
-            PATHS
-                /usr/lib
-            REQUIRED
-        )
+        message(STATUS "OPENCASCADE_LIBRARY_NAMES: ${OPENCASCADE_LIBRARY_NAMES}")
+        message(STATUS "OCC_LIBRARY_DIR: ${OCC_LIBRARY_DIR}")
+        if("${OCC_LIBRARY_DIR}" STREQUAL "")
+            find_library(OCC_LIBRARY TKernel
+                PATHS
+                    /usr/lib
+                REQUIRED
+            )
 
-        if(OCC_LIBRARY)
-            GET_FILENAME_COMPONENT(OCC_LIBRARY_DIR ${OCC_LIBRARY} PATH)
-            message(STATUS "Found Open CASCADE library files in: ${OCC_LIBRARY_DIR}")
+            if(OCC_LIBRARY)
+                GET_FILENAME_COMPONENT(OCC_LIBRARY_DIR ${OCC_LIBRARY} PATH)
+                message(STATUS "Found Open CASCADE library files in: ${OCC_LIBRARY_DIR}")
+            else()
+                message(FATAL_ERROR "Unable find Open CASCADE library directory, specify OCC_LIBRARY_DIR manually.")
+            endif()
         else()
-            message(FATAL_ERROR "Unable find Open CASCADE library directory, specify OCC_LIBRARY_DIR manually.")
+            set(OCC_LIBRARY_DIR ${OCC_LIBRARY_DIR} CACHE FILEPATH "Open CASCADE library files")
+            message(STATUS "Looking for Open CASCADE library files in: ${OCC_LIBRARY_DIR}")
         endif()
-    else()
-        set(OCC_LIBRARY_DIR ${OCC_LIBRARY_DIR} CACHE FILEPATH "Open CASCADE library files")
-        message(STATUS "Looking for Open CASCADE library files in: ${OCC_LIBRARY_DIR}")
-    endif()
-
-    clear_wasm_sysroot()
-    find_library(libTKernel NAMES TKernel TKerneld PATHS ${OCC_LIBRARY_DIR} NO_DEFAULT_PATH)
-    restore_wasm_sysroot()
 
-    if(libTKernel)
-        message(STATUS "Required Open Cascade Library files found")
-    else()
-        message(FATAL_ERROR "Unable to find Open Cascade library files, aborting")
-    endif()
+        if(NOT OpenCASCADE_FOUND)
+            clear_wasm_sysroot()
+            find_library(libTKernel NAMES TKernel TKerneld PATHS ${OCC_LIBRARY_DIR} NO_DEFAULT_PATH)
+            restore_wasm_sysroot()
 
-    # Use the found libTKernel as a template for all other OCC libraries
-    # TODO Extract this into macro/function
-    foreach(lib ${OPENCASCADE_LIBRARY_NAMES})
-        # Make sure we'll handle the Windows/MSVC debug postfix convention too.
-        string(REPLACE TKerneld "${lib}" lib_path "${libTKernel}")
-        string(REPLACE TKernel "${lib}" lib_path "${lib_path}")
-        list(APPEND OPENCASCADE_LIBRARIES "${lib_path}")
-    endforeach()
+            if(libTKernel)
+                message(STATUS "Required Open Cascade Library files found")
+            else()
+                message(FATAL_ERROR "Unable to find Open Cascade library files, aborting")
+            endif()
 
-    if(MSVC)
-        add_definitions(-DHAVE_NO_DLL)
-        add_debug_variants(OPENCASCADE_LIBRARIES "${OPENCASCADE_LIBRARIES}" d)
-    endif()
+            # Use the found libTKernel as a template for all other OCC libraries
+            # TODO Extract this into macro/function
+            foreach(lib ${OPENCASCADE_LIBRARY_NAMES})
+                # Make sure we'll handle the Windows/MSVC debug postfix convention too.
+                string(REPLACE TKerneld "${lib}" lib_path "${libTKernel}")
+                string(REPLACE TKernel "${lib}" lib_path "${lib_path}")
+                list(APPEND OPENCASCADE_LIBRARIES "${lib_path}")
+            endforeach()
 
-    if(WIN32)
-        # OCC might require linking to Winsock depending on the version and build configuration
-        list(APPEND OPENCASCADE_LIBRARIES ws2_32.lib)
-    endif()
+            if(MSVC)
+                add_definitions(-DHAVE_NO_DLL)
+            endif()
 
-    # Make sure cross-referenced symbols between static OCC libraries get
-    # resolved. Also add thread and rt libraries.
-    get_filename_component(libTKernelExt ${libTKernel} EXT)
-    if("${libTKernelExt}" STREQUAL ".a")
-        set(OCCT_STATIC ON)
-    endif()
+            if(WIN32)
+                # OCC might require linking to Winsock depending on the version and build configuration
+                list(APPEND OPENCASCADE_LIBRARIES ws2_32.lib)
+            endif()
 
-    if(OCCT_STATIC)
-        find_package(Threads)
-        
-        if(WASM_BUILD)
-            set(OPENCASCADE_LIBRARIES ${OPENCASCADE_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
+            # Make sure cross-referenced symbols between static OCC libraries get
+            # resolved. Also add thread and rt libraries.
+            get_filename_component(libTKernelExt ${libTKernel} EXT)
+            if("${libTKernelExt}" STREQUAL ".a")
+                set(OCCT_STATIC ON)
+            endif()
         else()
-            # OPENCASCADE_LIBRARIES repeated N times below in order to fix cyclic dependencies
-            # tfk: --start-group ... --end-group didn't work on the apple linker when last tested
-            if(APPLE)
-                set(OPENCASCADE_LIBRARIES ${OPENCASCADE_LIBRARIES} ${OPENCASCADE_LIBRARIES} ${OPENCASCADE_LIBRARIES} ${OPENCASCADE_LIBRARIES} ${OPENCASCADE_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
+            set(OPENCASCADE_LIBRARIES ${OPENCASCADE_LIBRARY_NAMES})
+        endif()
+
+        if(OCCT_STATIC)
+            find_package(Threads)
+            
+            if(WASM_BUILD)
+                set(OPENCASCADE_LIBRARIES ${OPENCASCADE_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
             else()
                 set(OPENCASCADE_LIBRARIES -Wl,--start-group ${OPENCASCADE_LIBRARIES} -Wl,--end-group ${CMAKE_THREAD_LIBS_INIT})
             endif()
-        endif()
         
-        if(NOT APPLE AND NOT WIN32)
-            set(OPENCASCADE_LIBRARIES ${OPENCASCADE_LIBRARIES} "rt")
-        endif()
-        if(NOT WIN32)
-            set(OPENCASCADE_LIBRARIES ${OPENCASCADE_LIBRARIES} "dl")
+            if(NOT APPLE AND NOT WIN32)
+                set(OPENCASCADE_LIBRARIES ${OPENCASCADE_LIBRARIES} "rt")
+            endif()
+            if(NOT WIN32)
+                set(OPENCASCADE_LIBRARIES ${OPENCASCADE_LIBRARIES} "dl")
+            endif()
         endif()
-    endif()
     endif(WITH_OPENCASCADE)
 endif(BUILD_IFCGEOM)
 
@@ -572,10 +574,6 @@ if(COLLADA_SUPPORT)
             message(FATAL_ERROR "COLLADA_SUPPORT enabled, but unable to find PCRE. "
                 "Disable COLLADA_SUPPORT or fix PCRE_LIBRARY_DIR path to proceed.")
         endif()
-
-        if(MSVC)
-            add_debug_variants(OPENCOLLADA_LIBRARIES "${OPENCOLLADA_LIBRARIES}" d)
-        endif()
     else()
         message(FATAL_ERROR "COLLADA_SUPPORT enabled, but unable to find OpenCOLLADA headers. "
             "Disable COLLADA_SUPPORT or fix OpenCOLLADA paths to proceed.")
@@ -583,6 +581,7 @@ if(COLLADA_SUPPORT)
 endif(COLLADA_SUPPORT)
 
 if(HDF5_SUPPORT)
+    find_package(HDF5 REQUIRED)
     if("${HDF5_INCLUDE_DIR}" STREQUAL "")
         message(STATUS "No HDF5 include directory specified")
     else()
@@ -612,13 +611,17 @@ if(HDF5_SUPPORT)
                 set(debug_postfix "_debug")
             endif()
 
-            set(HDF5_LIBRARIES
-                "${HDF5_LIBRARY_DIR}/libhdf5_cpp${debug_postfix}.${lib_ext}"
-                "${HDF5_LIBRARY_DIR}/libhdf5${debug_postfix}.${lib_ext}"
-                "${HDF5_LIBRARY_DIR}/libz${zlib_post}${debug_postfix}.${lib_ext}"
-                "${HDF5_LIBRARY_DIR}/libsz${debug_postfix}.${lib_ext}"
-                "${HDF5_LIBRARY_DIR}/libaec${debug_postfix}.${lib_ext}"
-            )
+            if(HDF5_FOUND)
+                set(HDF5_LIBRARIES "HDF5::HDF5")
+            else()
+                set(HDF5_LIBRARIES
+                    "${HDF5_LIBRARY_DIR}/libhdf5_cpp${debug_postfix}.${lib_ext}"
+                    "${HDF5_LIBRARY_DIR}/libhdf5${debug_postfix}.${lib_ext}"
+                    "${HDF5_LIBRARY_DIR}/libz${zlib_post}${debug_postfix}.${lib_ext}"
+                    "${HDF5_LIBRARY_DIR}/libsz${debug_postfix}.${lib_ext}"
+                    "${HDF5_LIBRARY_DIR}/libaec${debug_postfix}.${lib_ext}"
+                )
+            endif()
 
         else()
             message(STATUS "Packaging hdf5 and zlib for conda distribution")
@@ -876,7 +879,7 @@ if(BUILD_IFCGEOM)
 	endif()
 endif()
 
-if(BUILD_CONVERT OR BUILD_IFCPYTHON)
+if(BUILD_CONVERT OR BUILD_IFCPYTHON OR BUILD_IFCGEOM) 
 	foreach(schema ${SCHEMA_VERSIONS})
 		set(SERIALIZER_SCHEMA_LIBRARIES ${SERIALIZER_SCHEMA_LIBRARIES} Serializers_ifc${schema})
 	endforeach()
@@ -886,12 +889,13 @@ if(BUILD_CONVERT OR BUILD_IFCPYTHON)
         foreach(schema ${SCHEMA_VERSIONS})
             set(GEOM_SERIALIZER_SCHEMA_LIBRARIES ${GEOM_SERIALIZER_SCHEMA_LIBRARIES} GeometrySerializers_ifc${schema})
 
-            add_library(geometry_serializer_ifc${schema} STATIC ../src/ifcgeom/Serialization/schema/Serialization.cpp)
+            add_library(geometry_serializer_ifc${schema} ../src/ifcgeom/Serialization/schema/Serialization.cpp)
             set_target_properties(geometry_serializer_ifc${schema} PROPERTIES COMPILE_FLAGS "-DIFC_GEOM_EXPORTS -DIfcSchema=Ifc${schema}")
             list(APPEND geometry_serializer_libraries geometry_serializer_ifc${schema})
+            target_link_libraries(geometry_serializer_ifc${schema} IfcParse TKBRep)
         endforeach()
 
-        add_library(geometry_serializer STATIC ../src/ifcgeom/Serialization/Serialization.cpp)
+        add_library(geometry_serializer ../src/ifcgeom/Serialization/Serialization.cpp)        
         target_link_libraries(geometry_serializer ${geometry_serializer_libraries})
         set(IFCOPENSHELL_LIBRARIES ${IFCOPENSHELL_LIBRARIES} geometry_serializer ${geometry_serializer_libraries})
     endif()
@@ -956,33 +960,6 @@ if(BUILD_IFCGEOM)
         list(APPEND CGAL_LIBRARIES "${libGMP}")
     endif()
 
-    foreach(kernel ${GEOMETRY_KERNELS})
-        string(TOUPPER ${kernel} KERNEL_UPPER)
-        file(GLOB IFCGEOM_H_FILES ../src/ifcgeom/kernels/${kernel}/*.h)
-        file(GLOB IFCGEOM_CPP_FILES ../src/ifcgeom/kernels/${kernel}/*.cpp)
-        set(IFCGEOM_FILES ${IFCGEOM_CPP_FILES} ${IFCGEOM_H_FILES})
-        
-        add_library(geometry_kernel_${kernel} ${IFCGEOM_FILES})
-        set_property(TARGET geometry_kernel_${kernel} APPEND PROPERTY COMPILE_FLAGS "-DIFC_GEOM_EXPORTS")
-        # needed?
-        # if(NOT WASM_BUILD)
-        # endif()
-        target_link_libraries(geometry_kernel_${kernel} ${${KERNEL_UPPER}_LIBRARIES})
-        list(APPEND kernel_libraries geometry_kernel_${kernel})
-        
-        if(${kernel} STREQUAL "cgal")
-            set_property(TARGET geometry_kernel_${kernel} APPEND_STRING PROPERTY COMPILE_FLAGS " -DCGAL_HAS_THREADS")
-
-            add_library(geometry_kernel_${kernel}_simple ${IFCGEOM_FILES})
-            set_target_properties(geometry_kernel_${kernel}_simple PROPERTIES COMPILE_FLAGS "-DIFC_GEOM_EXPORTS -DIFOPSH_SIMPLE_KERNEL -DCGAL_HAS_THREADS")
-            # needed?
-            # if(NOT WASM_BUILD)
-            # endif()
-            target_link_libraries(geometry_kernel_${kernel}_simple ${${KERNEL_UPPER}_LIBRARIES})
-            list(APPEND kernel_libraries geometry_kernel_${kernel}_simple)
-        endif()
-    endforeach()
-
     # IfcGeom
     foreach(schema ${SCHEMA_VERSIONS})
         file(GLOB IFCGEOM_I_FILES ../src/ifcgeom/mapping/*.i)
@@ -990,7 +967,7 @@ if(BUILD_IFCGEOM)
         file(GLOB IFCGEOM_CPP_FILES ../src/ifcgeom/mapping/*.cpp)
         set(IFCGEOM_FILES ${IFCGEOM_CPP_FILES} ${IFCGEOM_H_FILES} ${IFCGEOM_I_FILES})
         
-        add_library(geometry_mapping_ifc${schema} STATIC ${IFCGEOM_FILES})
+        add_library(geometry_mapping_ifc${schema} ${IFCGEOM_FILES})
         set_target_properties(geometry_mapping_ifc${schema} PROPERTIES COMPILE_FLAGS "-DIFC_GEOM_EXPORTS -DIfcSchema=Ifc${schema}")
         target_link_libraries(geometry_mapping_ifc${schema} IfcParse)
         list(APPEND mapping_libraries geometry_mapping_ifc${schema})
@@ -1009,11 +986,38 @@ if(BUILD_IFCGEOM)
     endif()
 
     if(WASM_BUILD)
-        target_link_libraries(IfcGeom ${kernel_libraries} ${mapping_libraries} ${CMAKE_THREAD_LIBS_INIT})
+        target_link_libraries(IfcGeom ${kernel_libraries} ${mapping_libraries} ${CMAKE_THREAD_LIBS_INIT} "Eigen3::Eigen")
     else()
-        target_link_libraries(IfcGeom IfcParse ${kernel_libraries} ${mapping_libraries} ${CMAKE_THREAD_LIBS_INIT})
+        target_link_libraries(IfcGeom IfcParse ${kernel_libraries} ${mapping_libraries} ${CMAKE_THREAD_LIBS_INIT} "Eigen3::Eigen")
     endif()
 
+    foreach(kernel ${GEOMETRY_KERNELS})
+        string(TOUPPER ${kernel} KERNEL_UPPER)
+        file(GLOB IFCGEOM_H_FILES ../src/ifcgeom/kernels/${kernel}/*.h)
+        file(GLOB IFCGEOM_CPP_FILES ../src/ifcgeom/kernels/${kernel}/*.cpp)
+        set(IFCGEOM_FILES ${IFCGEOM_CPP_FILES} ${IFCGEOM_H_FILES})
+        
+        add_library(geometry_kernel_${kernel} ${IFCGEOM_FILES})
+        set_property(TARGET geometry_kernel_${kernel} APPEND PROPERTY COMPILE_FLAGS "-DIFC_GEOM_EXPORTS")
+        # needed?
+        # if(NOT WASM_BUILD)
+        # endif()
+        target_link_libraries(geometry_kernel_${kernel} IfcGeom ${${KERNEL_UPPER}_LIBRARIES})
+        list(APPEND kernel_libraries geometry_kernel_${kernel})
+        
+        if(${kernel} STREQUAL "cgal")
+            set_property(TARGET geometry_kernel_${kernel} APPEND_STRING PROPERTY COMPILE_FLAGS " -DCGAL_HAS_THREADS")
+
+            add_library(geometry_kernel_${kernel}_simple ${IFCGEOM_FILES})
+            set_target_properties(geometry_kernel_${kernel}_simple PROPERTIES COMPILE_FLAGS "-DIFC_GEOM_EXPORTS -DIFOPSH_SIMPLE_KERNEL -DCGAL_HAS_THREADS")
+            # needed?
+            # if(NOT WASM_BUILD)
+            # endif()
+            target_link_libraries(geometry_kernel_${kernel}_simple ${${KERNEL_UPPER}_LIBRARIES} "Eigen3::Eigen")
+            list(APPEND kernel_libraries geometry_kernel_${kernel}_simple)
+        endif()
+    endforeach()
+
 endif(BUILD_IFCGEOM)
 
 if(BUILD_CONVERT OR BUILD_IFCPYTHON)
@@ -1026,7 +1030,7 @@ if(BUILD_CONVERT OR BUILD_IFCPYTHON)
     set(SERIALIZERS_S_FILES ${SERIALIZERS_S_H_FILES} ${SERIALIZERS_S_CPP_FILES})
 
     foreach(schema ${SCHEMA_VERSIONS})
-        add_library(Serializers_ifc${schema} STATIC ${SERIALIZERS_S_FILES})
+        add_library(Serializers_ifc${schema} ${SERIALIZERS_S_FILES})
         set_target_properties(Serializers_ifc${schema} PROPERTIES COMPILE_FLAGS "-DIFC_GEOM_EXPORTS -DIfcSchema=Ifc${schema}")
         
         if(WASM_BUILD)
@@ -1040,12 +1044,12 @@ if(BUILD_CONVERT OR BUILD_IFCPYTHON)
     set_target_properties(Serializers PROPERTIES COMPILE_FLAGS "-DIFC_GEOM_EXPORTS" VERSION "${PROJECT_VERSION}" SOVERSION "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}")
 
     if(WITH_PROJ)
+        find_package(proj REQUIRED CONFIG)
         target_compile_definitions(Serializers PRIVATE "WITH_PROJ")
         if (PROJ_STATIC)
             target_compile_definitions(Serializers PRIVATE "PROJ_DLL=")
         endif()
-        target_include_directories(Serializers PRIVATE ${PROJ_INCLUDE_DIR} ${SQLITE_INCLUDE_DIR})
-        target_link_libraries(Serializers ${PROJ_LIBRARIES})
+        target_link_libraries(Serializers PROJ::proj)
     endif()
 
     target_link_libraries(Serializers ${SERIALIZER_SCHEMA_LIBRARIES} ${OPENCOLLADA_LIBRARIES} ${USD_LIBRARIES})
@@ -1104,12 +1108,12 @@ if(BUILD_CONVERT)
         set_property(TARGET IfcConvert APPEND_STRING PROPERTY COMPILE_FLAGS " -DIFOPSH_WITH_CITYJSON")
     endif()
 
-    if((NOT WIN32) AND BUILD_SHARED_LIBS)
-        # Only set RPATHs when building shared libraries (i.e. IfcParse and
-        # IfcGeom are dynamically linked). Not necessarily a perfect solution
-        # but probably a good indication of whether RPATHs are necessary.
-        SET_INSTALL_RPATHS(IfcConvert "${IFCOPENSHELL_LIBRARY_DIR};${OCC_LIBRARY_DIR};${Boost_LIBRARY_DIRS};${OPENCOLLADA_LIBRARY_DIR}")
-    endif()
+    # if((NOT WIN32) AND BUILD_SHARED_LIBS)
+    #     # Only set RPATHs when building shared libraries (i.e. IfcParse and
+    #     # IfcGeom are dynamically linked). Not necessarily a perfect solution
+    #     # but probably a good indication of whether RPATHs are necessary.
+    #     SET_INSTALL_RPATHS(IfcConvert "${IFCOPENSHELL_LIBRARY_DIR};${OCC_LIBRARY_DIR};${Boost_LIBRARY_DIRS};${OPENCOLLADA_LIBRARY_DIR}")
+    # endif()
 
     install(TARGETS IfcConvert
         ARCHIVE DESTINATION ${LIBDIR}
@@ -1126,9 +1130,9 @@ if(BUILD_GEOMSERVER)
     add_executable(IfcGeomServer ${SOURCE_FILES})
     target_link_libraries(IfcGeomServer ${IFCOPENSHELL_LIBRARIES} ${OPENCASCADE_LIBRARIES} ${Boost_LIBRARIES})
 
-    if((NOT WIN32) AND BUILD_SHARED_LIBS)
-        SET_INSTALL_RPATHS(IfcGeomServer "${IFCOPENSHELL_LIBRARY_DIR};${OCC_LIBRARY_DIR};${Boost_LIBRARY_DIRS}")
-    endif()
+    # if((NOT WIN32) AND BUILD_SHARED_LIBS)
+    #     SET_INSTALL_RPATHS(IfcGeomServer "${IFCOPENSHELL_LIBRARY_DIR};${OCC_LIBRARY_DIR};${Boost_LIBRARY_DIRS}")
+    # endif()
 
     install(TARGETS IfcGeomServer
         ARCHIVE DESTINATION ${LIBDIR}
@@ -1227,14 +1231,19 @@ install(TARGETS IfcParse
 )
 
 if(BUILD_IFCGEOM)
-    # install(FILES ${IFCGEOM_H_FILES}
-    #     DESTINATION ${INCLUDEDIR}/ifcgeom
-    # )
+    install(FILES ${IFCGEOM_H_FILES}
+        DESTINATION ${INCLUDEDIR}/ifcgeom
+    )
 
     install(FILES ${SCHEMA_AGNOSTIC_H_FILES}
         DESTINATION ${INCLUDEDIR}/ifcgeom
     )
 
+    file(GLOB IFCGEOM_SERIALIZATION_H_FILE ../src/ifcgeom/Serialization/*.h)
+    install(FILES ${IFCGEOM_SERIALIZATION_H_FILE}
+        DESTINATION ${INCLUDEDIR}/ifcgeom/Serialization
+    )
+
     foreach(kernel ${GEOMETRY_KERNELS})
         file(GLOB IFCGEOM_H_FILES ../src/ifcgeom/kernels/${kernel}/*.h)
          install(FILES ${IFCGEOM_H_FILES}
